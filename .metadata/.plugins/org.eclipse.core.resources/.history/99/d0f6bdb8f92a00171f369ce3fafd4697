import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Random;

public class TCPprotocol extends Thread {
	
	private int [] mLastFib;
	private int [] mLastLargerRand;
	private int [] mLastPrime;
	
	private String input;
	
	private PrintWriter out;
	private BufferedReader in;
	private Socket mClientSocket;
	
	public TCPprotocol(Socket clientSocket, int[] lastFib, int[] lastLargerRand, int[] lastPrime){
		mClientSocket = clientSocket;
		mLastFib = lastFib;
		mLastLargerRand = lastLargerRand;
		mLastPrime = lastPrime;
		initializeInNOut();
	}
	
	public void initializeInNOut(){
		try {
			out = new PrintWriter(mClientSocket.getOutputStream(),true);
			in = new BufferedReader(new InputStreamReader(mClientSocket.getInputStream()));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void run(){
		try{
			// output will be null if you haven't connected to the socket yet
			
			if(input == null)
				out.println("Connected");
				
			input = in.readLine();
				
			while(!input.equals("quit")){
				switch(input){
					case "nextPrime":
						for(int i = 0; i<5; i++)
							out.println(Integer.toString(nextPrime()));
						break;
					case "nextLargerRand":
						for(int i = 0; i<5; i++)
							out.println(Integer.toString(nextLargerRand()));
						break;
					case "nextEvenFib":
						for(int i = 0; i<5; i++)
							out.println(Integer.toString(nextEvenFib()));
						break;
					default:
						out.println("Connected");
						break;
				}
				input = in.readLine();
				if(input == null){
					break;
				}
			}
			out.println("quit");
		} catch(IOException e){
			System.out.println("Exception caught when trying to listen on port "
	                + mClientSocket.getPort() + " or listening for a connection");
	            System.out.println(e.getMessage());
		}
	}
	
	public int nextPrime(){
		while(!isPrime(++mLastPrime[0])){
		}
		return mLastPrime[0];
	}
	
	public boolean isPrime(int n){
		if(n<2)
			return false;
		for(int i = 2; i <= (int)Math.sqrt(n); i++){
			if(n % i == 0)
				return false;
		}
		return true;
	}
	
	public int nextEvenFib(){
		if(mLastFib[0] == 0 && mLastFib[1] == 0){
			mLastFib[1] = 1;
		}
		do{
			int temp = mLastFib[1];
			mLastFib[1] += mLastFib[0];
			mLastFib[0] = temp;
		} while(mLastFib[1] % 2 != 0);
		return mLastFib[1];
	}
	
	public int nextLargerRand(){
		Random rand = new Random();
		mLastLargerRand[0] = rand.nextInt(100) + mLastLargerRand[0];
		return mLastLargerRand[0];
	}

}
